// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.17626
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MdDayCalculator.BDD.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("MainPage")]
    public partial class MainPageFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MainPage.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "MainPage", "In order to use MdDayCalculator\r\nAs a WP7 user\r\nI want to multiple two values", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiplication result is correct")]
        public virtual void MultiplicationResultIsCorrect()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplication result is correct", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("my app is clean installed and running");
#line 8
    testRunner.Then("I enter \"2\" into the control \"tbFirstNumber\"");
#line 9
    testRunner.Then("I enter \"3\" into the control \"tbSecondNumber\"");
#line 10
    testRunner.Then("I press the control \"btnCalculate\"");
#line 11
    testRunner.Then("I see the control \"tbResult\" contains \"6\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Both controls are empty")]
        public virtual void BothControlsAreEmpty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Both controls are empty", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("my app is clean installed and running");
#line 15
 testRunner.Then("I press the control \"btnCalculate\"");
#line 16
 testRunner.Then("I see the control \"tbValidationMessage\" contains \"Please enter two numbers.\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("First control value is string")]
        public virtual void FirstControlValueIsString()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("First control value is string", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
 testRunner.Given("my app is clean installed and running");
#line 20
 testRunner.Then("I enter \"invalid value\" into the control \"tbFirstNumber\"");
#line 21
 testRunner.Then("I enter \"3\" into the control \"tbSecondNumber\"");
#line 22
 testRunner.Then("I press the control \"btnCalculate\"");
#line 23
 testRunner.Then("I see the control \"tbValidationMessage\" contains \"Please enter a valid first numb" +
                    "er.\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Second control is string")]
        public virtual void SecondControlIsString()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Second control is string", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("my app is clean installed and running");
#line 27
 testRunner.Then("I enter \"invalid value\" into the control \"tbSecondNumber\"");
#line 28
 testRunner.Then("I enter \"2\" into the control \"tbFirstNumber\"");
#line 29
 testRunner.Then("I press the control \"btnCalculate\"");
#line 30
 testRunner.Then("I see the control \"tbValidationMessage\" contains \"Please enter a valid second num" +
                    "ber.\"");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
